package Clases;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.bson.Document;
import org.bson.conversions.Bson;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Accumulators;
import com.mongodb.client.model.Aggregates;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Sorts;

public class VentaRepository {

    private final MongoCollection<Document> collection;

    public VentaRepository(MongoDatabase database) {
        this.collection = database.getCollection("ventas");
    }

    
    
    
    public List<Document> buscarVentasEntreFechas(LocalDate desde, LocalDate hasta) {
        Bson filtro = Filters.and(
            Filters.gte("fecha", desde.toString()),
            Filters.lte("fecha", hasta.toString())
        );

        return collection.find(filtro).into(new ArrayList<>());
    }
    
    //CONSULTA 1 
    public Map<String, Integer> cantidadTotalVentasPorSucursal(LocalDate desde, LocalDate hasta) {
    	
        List<Bson> pipeline = Arrays.asList(
            Aggregates.match(Filters.and(
                Filters.gte("fecha", desde.toString()),
                Filters.lte("fecha", hasta.toString())
            )),
            Aggregates.group("$empleadoAtiende.sucursal.puntoDeVenta", Accumulators.sum("cantidad", 1))
        );

        Map<String, Integer> resultado = new HashMap<>();
        collection.aggregate(pipeline).forEach(doc -> {
        	
            Object valor = doc.get("cantidad");
            int total = (Integer) valor;
                
            resultado.put(doc.getString("_id"), total);
        });
        
        return resultado;
    }
    
    //CONSULTA 3 
    public Map<String, Double> totalVentasPorSucursal(LocalDate desde, LocalDate hasta) {
        // Esto asume que ten√©s "sucursal.ubicacion" o algo similar en los documentos
        List<Bson> pipeline = Arrays.asList(
            Aggregates.match(Filters.and(
                Filters.gte("fecha", desde.toString()),
                Filters.lte("fecha", hasta.toString())
            )),
            Aggregates.group("$empleadoAtiende.sucursal.puntoDeVenta", Accumulators.sum("total", "$totalVenta"))
        );

        Map<String, Double> resultado = new HashMap<>();
        collection.aggregate(pipeline).forEach(doc -> {
        	
            Object valor = doc.get("total");
            double total = (valor instanceof Integer)
                ? ((Integer) valor).doubleValue()
                : (Double) valor;
                
            resultado.put(doc.getString("_id"), total);
        });
        
        return resultado;
    }
    
    

    
    //CONSULTA 5 
    
    public Map<String, List<String>> rankingPorProductoYSucursal() {
        List<Bson> pipeline = Arrays.asList(
            Aggregates.unwind("$detalles"),
            Aggregates.group(
                new Document("sucursal", "$empleadoAtiende.sucursal.puntoDeVenta")
                          .append("producto", "$detalles.producto.codigo"),
                Accumulators.sum("total", "$detalles.subTotal")
            ),
            Aggregates.sort(Sorts.orderBy(
                Sorts.ascending("_id.sucursal"),
                Sorts.descending("total")
            ))
        );

        Map<String, List<String>> reporte = new LinkedHashMap<>();

        collection.aggregate(pipeline).forEach(doc -> {
            Document id = (Document) doc.get("_id");
            String sucursal = id.get("sucursal").toString();
            String producto = id.get("producto").toString();

            Object valor = doc.get("total");
            double total = (valor instanceof Integer)
                ? ((Integer) valor).doubleValue()
                : (Double) valor;

            String linea = String.format(">Producto %s (Total: %.2f)", producto, total);
            reporte.computeIfAbsent(sucursal, k -> new ArrayList<>()).add(linea);
        });

        return reporte;
    }

    //CONSULTA 6 
    
    public Map<String, List<String>> rankingCantidadPorProductoYSucursal() {
        List<Bson> pipeline = Arrays.asList(
            Aggregates.unwind("$detalles"),
            Aggregates.group(
                new Document("sucursal", "$empleadoAtiende.sucursal.puntoDeVenta")
                          .append("producto", "$detalles.producto.codigo"),
                          Accumulators.sum("cantidadTotal", "$detalles.cantidad")

            ),
            Aggregates.sort(Sorts.orderBy(
                Sorts.ascending("_id.sucursal"),
                Sorts.descending("cantidadTotal")
            ))
        );

        Map<String, List<String>> reporte = new LinkedHashMap<>();

        collection.aggregate(pipeline).forEach(doc -> {
            Document id = (Document) doc.get("_id");
            String sucursal = id.get("sucursal").toString();
            String producto = id.get("producto").toString();

            Object cantidadObj = doc.get("cantidadTotal");
            int cantidad;

            if (cantidadObj instanceof Integer) {
                cantidad = (Integer) cantidadObj;
            } else if (cantidadObj instanceof Long) {
                cantidad = ((Long) cantidadObj).intValue();
            } else {
                cantidad = 0; // fallback por si es otro tipo o nulo
            }
            
            
            String linea = String.format("> %s (Cantidad: %d)", producto, cantidad);
            reporte.computeIfAbsent(sucursal, k -> new ArrayList<>()).add(linea);
        });

        return reporte;
    }
    
    
    //CONSULTA 8
    
    public Map<String, List<String>> rankingVentasPorClienteYSucursal() {
        List<Bson> pipeline = Arrays.asList(
            Aggregates.group(
                new Document("sucursal", "$empleadoAtiende.sucursal.puntoDeVenta")
                          .append("cliente", "$cliente.id_cliente"),  
                Accumulators.sum("cantidadVentas", 1) 
            ),
            Aggregates.sort(Sorts.orderBy(
                Sorts.ascending("_id.sucursal"),
                Sorts.descending("cantidadVentas")
            ))
        );

        Map<String, List<String>> reporte = new LinkedHashMap<>();

        collection.aggregate(pipeline).forEach(doc -> {
            Document id = (Document) doc.get("_id");
            String sucursal = id.get("sucursal").toString();
            String cliente = id.get("cliente").toString();

            Object cantidadObj = doc.get("cantidadVentas");
            int cantidad;

            if (cantidadObj instanceof Integer) {
                cantidad = (Integer) cantidadObj;
            } else if (cantidadObj instanceof Long) {
                cantidad = ((Long) cantidadObj).intValue();
            } else {
                cantidad = 0;
            }

            String linea = String.format("> Cliente %s (Compras: %d)", cliente, cantidad);

            reporte.computeIfAbsent(sucursal, k -> new ArrayList<>()).add(linea);
        });

        return reporte;
    }
    
    // Consulta 2
    public Map<String, Integer> cantidadVentasPorObraSocial(LocalDate desde, LocalDate hasta) {
        List<Bson> pipeline = Arrays.asList(
            Aggregates.match(Filters.and(
                Filters.gte("fecha", desde.toString()),
                Filters.lte("fecha", hasta.toString())
            )),
            // Agrupamos por obra social, pero tratamos los null como "Privado"
            Aggregates.group(
                new Document("$ifNull", Arrays.asList("$cliente.obraSocial.nombre", "Privado")),
                Accumulators.sum("cantidad", 1)
            )
        );

        Map<String, Integer> resultado = new HashMap<>();

        collection.aggregate(pipeline).forEach(doc -> {
            String nombreObraSocial = doc.getString("_id");
            int cantidad = doc.getInteger("cantidad", 0);
            resultado.put(nombreObraSocial, cantidad);
        });

        return resultado;
    }
    // consulta 4
    public Map<String, Integer> cantidadVentasPorTipoProducto(LocalDate desde, LocalDate hasta) {
        List<Bson> pipeline = Arrays.asList(
            Aggregates.match(Filters.and(
                Filters.gte("fecha", desde.toString()),
                Filters.lte("fecha", hasta.toString())
            )),
            Aggregates.unwind("$detalles"),
            Aggregates.group("$detalles.producto.tipo", Accumulators.sum("cantidad", "$detalles.cantidad"))
        );

        Map<String, Integer> resultado = new HashMap<>();

        collection.aggregate(pipeline).forEach(doc -> {
            String tipo = doc.getString("_id");
            int cantidad = doc.getInteger("cantidad", 0);
            resultado.put(tipo, cantidad);
        });

        return resultado;
    }

  }